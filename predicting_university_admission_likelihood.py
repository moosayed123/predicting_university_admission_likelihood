# -*- coding: utf-8 -*-
"""Predicting_University_Admission_Likelihood.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yDZWMJAOQSX20-aejqFRlCO05295mS63
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/mission5.csv')

data.head()

data['Accepted'] = data['Accepted'].map({"No":0, "Yes":1})

data.head()

data.isna().sum()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data['Accepted'] = le.fit_transform(data['Accepted'])

data.head()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x = data.drop('Accepted', axis=1)
x = scaler.fit_transform(x)

data.describe()

plt.figure(figsize=(10,10))
sns.histplot(x=data['GPA'], color="red", kde=True)
plt.xlabel('GPA')
plt.ylabel('Count')
plt.title('Distribution of GPA')
plt.show()

plt.figure(figsize=(10,10))
sns.histplot(x=data['Test Score'], color="red", kde=True)
plt.xlabel('Test Score')
plt.ylabel('Count')
plt.title('Distribution of Test Score')
plt.show()

plt.figure(figsize=(10,10))
sns.scatterplot(x=data['Extracurricular Activities'], y=data['Accepted'], color="red")
plt.xlabel('Extracurricular Activities')
plt.ylabel('Accepted')
plt.title('relation between Extracurricular Activities  and Accepted')
plt.show()

plt.figure(figsize=(10,10))
sns.barplot(x=data['Volunteer Hours'], y=data['Accepted'], color="red")
plt.xlabel('Volunteer Hours')
plt.ylabel('Accepted')
plt.title('Impact of Volunteer Hours on Accepted')
plt.show()

plt.figure(figsize=(10,10))
sns.barplot(x=data['Recommendation Letters'], y=data['Accepted'], color="red")
plt.xlabel('Recommendation Letters')
plt.ylabel('Accepted')
plt.title('Impact of Recommendation Letters on Accepted')
plt.show()

x

y = data['Accepted']

y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

lr = LogisticRegression()
lr.fit(x_train, y_train)
dt  = DecisionTreeClassifier()
dt.fit(x_train, y_train)
y_pred_lr = lr.predict(x_test)
y_pred_dt = dt.predict(x_test)

print("Accuracy score for lr:", accuracy_score(y_test, y_pred_lr))
print("Accuracy score for dt:", accuracy_score(y_test, y_pred_dt))

print("classification report for lr:", classification_report(y_test, y_pred_lr))
print("classification report for dt:", classification_report(y_test, y_pred_dt))

print("confusion matrix for lr:", confusion_matrix(y_test, y_pred_lr))
print("confusion matrix for dt:", confusion_matrix(y_test, y_pred_dt))

plt.figure(figsize=(5,5))
plt.scatter(x=y_test,y=y_pred_lr, color="red", label="LR")
plt.xlabel('y_test')
plt.ylabel('y_pred')
plt.title('lr vs dt')
plt.legend()
plt.show()
# use threshold <=0.5 ==> No else if >0.5 ==> yes

plt.figure(figsize=(5,5))
plt.scatter(x=y_test,y=y_pred_dt, color="blue", label="DT")
plt.xlabel('y_test')
plt.ylabel('y_pred')
plt.title('lr vs dt')
plt.legend()
plt.show()
# use threshold <=0.5 ==> No else if >0.5 ==> yes

from sklearn.model_selection import GridSearchCV, RandomizedSearchCV

grid_params = {"max_iter": [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]}
grid_search = GridSearchCV(lr, grid_params, cv=5)
grid_search.fit(x_train, y_train)
print("Best parameters:", grid_search.best_params_)
print("Best score:", grid_search.best_score_)

random_params = {"max_depth": [10, 15, 20, 30, 35, 40, 45], "min_samples_split": [2, 5, 10, 15, 20]}
random_search = RandomizedSearchCV(dt, random_params, cv=5)
random_search.fit(x_train, y_train)
print("Best parameters:", random_search.best_params_)
print("Best score:", random_search.best_score_)

pip install gradio

import gradio as gr

def predict_admission(gpa, ts, ea, vh, rl, es):
  try:
    input_data = pd.DataFrame(
        {
            "GPA":[gpa],
            "Test Score":[ts],
            "Extracurricular Activities":[ea],
            "Volunteer Hours":[vh],
            "Recommendation Letters":[rl],
            "Essay Score":[es]}
    )
    input_data = scaler.transform(input_data)
    prediction = dt.predict(input_data)
    if prediction[0] == 0:
          return "No"
    else:
          return "Yes"
  except Exception as e:
        return str(e)
gr.Interface(
    inputs= [

             gr.Number(label="GPA"),
             gr.Number(label="Test Score"),
             gr.Number(label="Extracurricular Activities"),
             gr.Number(label="Volunteer Hours"),
             gr.Number(label="Recommendation Letters"),
             gr.Number(label="Essay Score")
    ],
    fn = predict_admission, outputs= gr.Textbox(label="Admission Decision")
).launch()

